#include "fcc.h"
#include "lhco.h"
#include "atlasopen.h"
#include "atlasopenR2.h"
#include "atlasopenV3.h"
#include "cmsod.h"
#include "cmsod2.h"
#include "delphes.h"
#include "lvl0.h"
#include "CMSnanoAOD.h"
#include "AtlMin.h"
#include "AtlasTRT.h"
#include "VLLf.h"
#include "VLLt.h"
#include "DELPHES2.h"
#include "dbxParticle.h"
#include "newpoet.h"
#include <TH2.h>
#include <TError.h>
#include <TApplication.h>

#include <TKey.h>
#include <TTree.h>
#include <TCollection.h>

#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdlib>
//------------------------ TEST 
using namespace std;

int root_analysisd3pd(string sample, analy_struct aselect);

map<string, TTreeReader*> ttr_map;

int main(int argc, char*argv[])
{

/** select analysis */
 analy_struct aselect;
 aselect.Dumpcount=0;
 aselect.BPcount=1;
 aselect.dosystematics=false;
 aselect.doQCD=false;
 aselect.doRS=false;
 aselect.maxEvents=0; // now the default is 0
 aselect.startpt=0;
 aselect.verbfreq=1000;

 bool  use_fcc=false;
 bool use_lhco=false;
 bool use_lvl0=false;
 bool use_poet=false;
 bool use_delphes=false;
 bool use_atlasod=false;
 bool use_atlasodR2=false;
 bool use_atlasv3=false;  
 bool use_atlmin=false;
 bool use_atltrt=false;
 bool use_cmsod=false;
 bool use_cmsodR2=false;
 bool use_cmsnano=false;
 bool use_vllf=false;
 bool use_vllt=false;
 bool use_DELPHES2=false;

 string inptype;
 char *username=NULL;

cout << "CLA v2.50.0\t";
 cout << "compiled on XXXXYYYYZZZZ \n";

for (int i = 2; i < argc; i++) {
     if (i + 1 != argc) // Check that we haven't finished parsing already
         if        (std::string(argv[i]) == "-D")  { // Dump
             aselect.Dumpcount = atoi(argv[i + 1]);   i++;
         } else if (std::string(argv[i]) == "-BP") { // BP
             aselect.BPcount = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-S") { // systematics
             aselect.dosystematics = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-RS") { // Run Summary 
             aselect.doRS = true;  
//             cout <<"RS will be added\n";
         } else if (std::string(argv[i]) == "-Q") { // do QCD
             aselect.doQCD = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-P") { // use prereqs
             aselect.dependencies=argv[i + 1];  i++;
         } else if (std::string(argv[i]) == "-UN") { // username to be added to histoname
             username = argv[i + 1];  i++;
         } else if (std::string(argv[i]) == "-V") { // verbosity frequency in #events
             aselect.verbfreq = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-EVT") { // max events
             aselect.maxEvents = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-ST") { // start point
             aselect.startpt = atoi(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-HLT") { // HLT list
             aselect.hlt = std::string(argv[i + 1]);  i++;
         } else if (std::string(argv[i]) == "-inp") { // use LHCO format input
             inptype = argv[i + 1];  i++;
         } else {
             std::cout << "invalid arguments, please read the help below.\n";
     }
 }


 std::cout << "Analysis run count is "<< aselect.BPcount<<std::endl;
 if (aselect.Dumpcount > 0) std::cout << "#Dump runs is "<< aselect.Dumpcount<<std::endl;
 if (aselect.BPcount+aselect.Dumpcount < 1) {
  	     std::cout << "No analysis is set to run. Please set at least one.\n";
             std::cout << argv[0] << " filename.root \n"
                       << " [-inp LVL0 | DELPHES2 | LHCO | FCC | DELPHES | POET | ATLTRT | ATLMIN | ATLASOD | ATLASODR2 | ATLASODV3 | CMSOD | CMSODR2 | CMSNANO | VLLF |Â VLLT]\n"
                       << " [-BP #] [-D 1|0] [-P ] \n"
                       << " [-Q 1|0] [-HF 1|0] [-S 1|0] \n"
                       << " [-EVT #] [-UN userName] [-V v_freq] \n"  ;
  exit(-2);
 }

      if (inptype == "LHCO")    { use_lhco =true;}
 else if (inptype == "FCC" )    { use_fcc  =true;}
 else if (inptype == "POET" )   { use_poet =true;}
 else if (inptype == "DELPHES2"){ use_DELPHES2 =true;}
 else if (inptype == "LVL0")    { use_lvl0 =true;}
 else if (inptype == "DELPHES") { use_delphes =true;}
 else if (inptype == "ATLMIN")  { use_atlmin =true;}
 else if (inptype == "ATLTRT")  { use_atltrt =true;}
 else if (inptype == "ATLASOD") { use_atlasod =true;}
 else if (inptype == "ATLASODR2") { use_atlasodR2 =true;}
 else if (inptype == "ATLASODV3") {use_atlasv3 =true;}
 else if (inptype == "CMSOD")   { use_cmsod =true;}
 else if (inptype == "CMSODR2") { use_cmsodR2 =true;}
 else if (inptype == "CMSNANO") { use_cmsnano =true;}
 else if (inptype == "VLLF")	{ use_vllf =true;}
 else if (inptype == "VLLT")    { use_vllt =true;}
 else{
   std::cout<<"unknown input mode. exiting..."<<endl;
   exit(-3);
 }

 aselect.inputtype=inptype;

/** Chain the files  split by ',' */
  std::string argStr = argv[1];
  std::vector<std::string> fileList;
  for (size_t i=0,n; i <= argStr.length(); i=n+1) {
     n = argStr.find_first_of(',',i);
     if (n == std::string::npos) n = argStr.length();
     std::string tmp = argStr.substr(i,n-i);
     fileList.push_back(tmp);
  }
//  TApplication* theApp = new TApplication("App", &argc, argv);

  TChain *chain;

  std::string leafname;


  if (use_lhco){
   cout << "WARNING: using LHCO~~~reduced functionality~~~\n";
   leafname="LHCO";
  }else if (use_DELPHES2){
   cout << "~Now using DELPHES2 files.~\n";
   leafname="Delphes"; //DELPHES2 anchor
   cout << "~chained~\n";
  }else if (use_lvl0){
   cout << "~Now using LVL0 files.~\n";
   leafname="nt_tree";
  }else if (use_fcc){
   cout << "~Now using FCC files.~~~~~~ beta!\n";
   leafname="events";
  }else if (use_poet){
   cout << "~Now using new POET files.~~~~~~ alpha!\n";
   leafname="events";
  }else if (use_cmsodR2){
   cout << "~Now using CMS Open Data R2 files.~~~~~~ beta!\n";
   leafname="Events";
  }else if (use_cmsod){
   cout << "~Now using CMS Open Data files.~~~~~~ beta!\n";
   leafname="events";
  }else if (use_cmsnano){
   cout << "~Now using CMS NanoAOD files.~~~~~~ beta!\n";
   leafname="Events";
  }else if (use_atlasod){
   cout << "~Now using ATLAS Open Data files.~~~~~~ beta!\n";
   leafname="mini";
  }else if (use_atlasodR2){
   cout << "~Now using ATLAS Open Data R2 files.~~~~~~ beta!\n";
   leafname="mini";
  }else if (use_atlasv3){
   cout << "~Now using ATLAS Open Data v3 (R3) files.~~~~~~ beta!\n";
   leafname="analysis";  // v3 tree name
  }else if (use_atlmin){
   cout << "~Now using ATLAS Mini NTUPLE files.~~~~~~ alpha!\n";
   leafname="nominal";
  }else if (use_atltrt){
   cout << "~Now using ATLAS TRT NTUPLE files.~~~~~~ alpha!\n";
   leafname="track_tree";
  }else if (use_delphes){
   cout << "~Now using Delphes files.~~~~~~ beta!\n";
   leafname = "Delphes";
  }else if (use_vllf){
   cout << "~Now using ATLAS VLL Group f files.~~~~~~ alpha!\n";
   leafname = "nominal";
  }else if (use_vllt){
   cout << "~Now using ATLAS VLL TopCPToolkit files.~~~~~~ alpha!\n";
   leafname = "reco";
  }else{
   leafname = "physics";
  }

   chain = new TChain(leafname.c_str() );
   TFile * _afile = TFile::Open(fileList[0].c_str());

   TIter next(_afile->GetListOfKeys());
   TKey* key;
   while ((key = (TKey*)next())) {
        TClass* cl = gROOT->GetClass(key->GetClassName());
        if (!cl->InheritsFrom("TTree")) continue;
        TTree* tree = (TTree*)key->ReadObj();
        string curtree = tree->GetName();
//        std::cout << "Processing tree: " << curtree << "\t";
        TTreeReader* treader = new TTreeReader(tree);
        ttr_map[curtree] = treader;
//        std::cout << " Addr:"<<  treader<<"\n";

    }
 






 

  int aret;
  for (unsigned int iFile=0; iFile<fileList.size(); ++iFile){
    std::cout << "open " << fileList[iFile].c_str() << std::endl;
    gErrorIgnoreLevel = 5000;
    aret=chain->Add(fileList[iFile].c_str(), 0);
    cout << "RetVal:"<<aret<<endl;
  }
  if (chain->GetEntries() > 0 ) {
    cout << "initialized with the chain..."<< chain->GetEntries()<<endl; 
    string xxx="XXX";

   if (use_lhco){
    lhco *lhcoa=new lhco((char*)xxx.c_str(),chain);
          lhcoa->Loop(aselect, username);
   } else if (use_DELPHES2){
    DELPHES2 *DELPHES2a=new DELPHES2((char*)xxx.c_str(),chain);
          cout << "DELPHES2 obj ok\n";
             DELPHES2a->Loop(aselect, username);
  } else if (use_poet){
    newpoet *poeta=new newpoet((char*)xxx.c_str(),chain);
          poeta->Loop(aselect, username);
   } else if (use_lvl0){
    lvl0 *lvl0a=new lvl0((char*)xxx.c_str(),chain);
          lvl0a->Loop(aselect, username);
   } else if (use_cmsnano){
    CMSnanoAOD *CMSnanoAODa=new CMSnanoAOD((char*)xxx.c_str(),chain);
                CMSnanoAODa->Loop(aselect, username);
   } else if (use_cmsod){
    cmsod *cmsoda=new cmsod((char*)xxx.c_str(),chain);
           cmsoda->Loop(aselect, username);
   } else if (use_cmsodR2){
    cmsod2 *cmsoda=new cmsod2((char*)xxx.c_str(),chain);
           cmsoda->Loop(aselect, username);
   } else if (use_atlasod){
    atlasopen *atlasoda=new atlasopen((char*)xxx.c_str(),chain);
               atlasoda->Loop(aselect, username);
   } else if (use_atlasodR2){
    atlasopenR2 *atlasoda=new atlasopenR2((char*)xxx.c_str(),chain);
               atlasoda->Loop(aselect, username);
   } else if (use_atlasv3){
    atlasopenV3 *atlasv3a = new atlasopenV3((char*)xxx.c_str(), chain);
   atlasv3a->Loop(aselect, username);
  } else if (use_atlmin){
    AtlMin *atlmina=new AtlMin((char*)xxx.c_str(),chain);
            atlmina->Loop(aselect, username);
            delete atlmina;
  } else if (use_atltrt){
   AtlasTRT *atltrta=new AtlasTRT((char*)xxx.c_str(),chain);
             atltrta->Loop(aselect, username);
   } else if (use_fcc){
    fcc *fcca=new fcc((char*)xxx.c_str(),chain);
         fcca->Loop(aselect, username);
   } else if (use_delphes){
    delphes *delphesa=new delphes((char*)xxx.c_str(),chain);
             delphesa->Loop(aselect, username);
   } else if (use_vllf){
    VLLf *VLLfa=new VLLf((char*)xxx.c_str(),chain);
          VLLfa->Loop(aselect, username);
   } else if (use_vllt){
    VLLt *VLLta=new VLLt((char*)xxx.c_str(),chain);
          VLLta->Loop(aselect, username);
  }

  cout << "finished."<<endl;
  _afile->Close();
  cout << "input file Closed."<<endl;
  delete _afile;

  } else {
    std::cout <<"WARNING: No events found in files " << std::endl;
  }
  //chain->Delete();
  return 0;

}
